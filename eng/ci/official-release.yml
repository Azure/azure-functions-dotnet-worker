parameters:
- name: publishToNugetOrg
  displayName: Publish to nuget.org?
  type: boolean
  default: false
- name: packages
  displayName: Packages to publish (glob pattern)
  type: string
  default: core
  values:
  - core
  - sdk
  - extensions-abstractions
  - extensions-cosmos
  - extensions-eventgrid
  - extensions-eventhubs
  - extensions-http-aspnetcore
  - extensions-http
  - extensions-kafka
  - extensions-rabbitmq
  - extensions-rpc
  - extensions-servicebus
  - extensions-signalr
  - extensions-storage-blobs
  - extensions-storage-queues
  - extensions-storage
  - extensions-tables
  - extensions-timer
  - extensions-warmup

pr: none
trigger: none

resources:
  repositories:
  - repository: 1es
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
  - repository: eng
    type: git
    name: engineering
    ref: refs/heads/u/jviau/release-nupkg
  pipelines:
  - ${{ if or(eq(parameters.packages, 'core'), eq(parameters.packages, 'sdk')) }}:
    - pipeline: build
      source: dotnet-worker.official
  - ${{ else }}:
    - pipeline: build
      source: ${{ replace(parameters.packages, '-', '.') }}.official

variables:
  - name: artifact_name
    value: NugetPackages
  - name: package_pattern
    value: |
      *.nupkg
      !*.symbols.nupkg
  - template: /eng/ci/templates/variables/release-${{ parameters.packages }}.yml@self

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1es
  parameters:
    pool:
      name: 1es-pool-azfunc
      image: 1es-ubuntu-22.04
      os: linux

    stages:
    - stage: Validate
      jobs:
        - job: Validate

          variables:
            drop_path: $(Pipeline.Workspace)/drop

          templateContext:
            type: releaseJob
            isProduction: true
            inputs:
            - input: pipelineArtifact
              targetPath: $(drop_path)
              artifactName: $(artifact_name)
              pipeline: build

          steps:
          - pwsh: |
              $ErrorActionPreference = 'Stop'

              $name = "$(package_name)".Trim()
              Write-Host "Getting version for $name"
              $package = Get-ChildItem -Path $(drop_path) -Recurse -Filter "$name.?.*.nupkg"

              if ($package.Count -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]Could not find package $name."
                exit 1
              }

              if ($package.Count -gt 1) {
                Write-Host "##vso[task.LogIssue type=error;]Too many packages matched $name."
                exit 1
              }

              $version = $package.Name.Trim("$name.").Trim('.nupkg')
              Write-Host "##vso[build.updatebuildnumber]$version"
              Write-Host "##vso[build.addbuildtag]${{ parameters.packages }}"
              Write-Host "##vso[build.addbuildtag]$version"
            displayName: Get package version

    - stage: Release
      dependsOn: Validate
      jobs:
      - template: /ci/release-nuget-package.yml@eng
        parameters:
          isProduction: true
          approvers: '[internal]\Azure Functions Core'
          stagingFeed: public/pre-release
          packages: $(package_pattern)
          artifact:
            name: NugetPackages
            pipeline: build
          ${{ if eq(parameters.publishToNugetOrg, true) }}:
            partnerDrop:
              serviceConnection: azure-sdk-partner-drops
              targetFolder: $(target_folder_prefix)/$(Build.BuildNumber)
              runPipeline: false
