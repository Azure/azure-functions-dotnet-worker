parameters:
- name: publishToNugetOrg
  displayName: Publish to nuget.org?
  type: boolean
  default: false
- name: packages
  displayName: Packages to publish
  type: string
  default: core
  values:
  - core
  - sdk

pr: none
trigger: none

resources:
  repositories:
  - repository: 1es
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
  - repository: eng
    type: git
    name: engineering
    ref: refs/tags/release
  pipelines:
  - pipeline: build
    source: dotnet-worker.official

variables:
  artifact_name: NugetPackages
  ${{ if eq(parameters.packages, 'core') }}:
    target_folder: azure-functions/dotnet/worker
    package_name: Microsoft.Azure.Functions.Worker
    package_pattern: |
      Microsoft.Azure.Functions.Worker.*.nupkg
      !Microsoft.Azure.Functions.Worker.Sdk.*.nupkg
      !*.symbols.nupkg
  ${{ if eq(parameters.packages, 'sdk') }}:
    target_folder: azure-functions/dotnet/worker-sdk
    package_name: Microsoft.Azure.Functions.Worker.Sdk
    package_pattern: |
      Microsoft.Azure.Functions.Worker.Sdk.*.nupkg
      !*.symbols.nupkg

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1es
  parameters:
    pool:
      name: 1es-pool-azfunc
      image: 1es-ubuntu-22.04
      os: linux

    stages:
    - stage: Prepare
      jobs:
        - job: Prepare

          variables:
            drop_path: $(Pipeline.Workspace)/drop

          templateContext:
            type: validationJob
            inputs:
            - input: pipelineArtifact
              targetPath: $(drop_path)
              artifactName: $(artifact_name)
              pipeline: build

          steps:

          # Our build does not have a custom version number set. To convey the version number to the release stage,
          # we parse out the version from the .nupkg in the drop and set that as the build number. The release stage
          # can then reference $(Build.BuildVersion) for the target upload folder.
          - pwsh: |
              $ErrorActionPreference = 'Stop'

              $name = "$(package_name)".Trim()
              Write-Host "Getting version for $name"
              $package = Get-ChildItem -Path $(drop_path) -Recurse -Filter "$name.?.*.nupkg"

              if ($package.Count -eq 0) {
                Write-Host "##vso[task.LogIssue type=error;]Could not find package $name."
                exit 1
              }

              if ($package.Count -gt 1) {
                Write-Host "##vso[task.LogIssue type=error;]Too many packages matched $name."
                exit 1
              }

              $version = $package.Name.Trim("$name.").Trim('.nupkg')
              Write-Host "##vso[build.updatebuildnumber]$version"
              Write-Host "##vso[build.addbuildtag]${{ parameters.packages }}"
              Write-Host "##vso[build.addbuildtag]$version"
            displayName: Get package version

    - stage: Release
      dependsOn: Prepare
      jobs:
      - template: /ci/release-nuget-package.yml@eng
        parameters:
          isProduction: true
          approvers: '[internal]\Azure Functions Core'
          stagingFeed: public/pre-release
          packages: $(package_pattern)
          artifact:
            name: NugetPackages
            pipeline: build
          ${{ if eq(parameters.publishToNugetOrg, true) }}:
            partnerDrop:
              serviceConnection: azure-sdk-partner-drops
              targetFolder: $(target_folder)/$(Build.BuildNumber)
              runPipeline: false
