parameters:
  name: PoolName
  type: string

jobs:
- job: RunIntegrationTests_Windows
  displayName: 'Run integration tests - windows -'

  strategy:
    matrix:
      net8:
        dotnetVersion: 'net8'
      netfx:
        dotnetVersion: 'netfx'

  pool:
    name: ${{ parameters.PoolName }}
    image: 1es-windows-2022
    os: windows

  steps:

  - pwsh: . "tools/start-emulators.ps1" -NoWait
    displayName: "Start emulators (NoWait)"

  - template: /eng/ci/templates/steps/install-dotnet.yml@self

  - task: DotNetCoreCLI@2
    displayName: Build DotNetWorker
    inputs:
      command: build
      arguments: '-c Release'
      projects: |
        DotNetWorker.sln
        DotNetWorker.Extensions.sln

  - template: /eng/ci/templates/steps/setup-e2e-tests.yml@self
    parameters:
      DotnetVersion: $(dotnetVersion)
      UseCoreToolsBuild: $(UseCoreToolsBuildFromIntegrationTests)
      SkipBuildOnPack: true

  - task: DotNetCoreCLI@2
    displayName: 'Run E2E Tests'
    inputs:
      command: test
      arguments: -v n --no-build -c Release --filter "FullyQualifiedName!~Microsoft.Azure.Functions.Worker.E2ETests.AspNetCore" # skip AspNetCore tests
      projects: |
        **\E2ETests.csproj
        **\Sdk.E2ETests.csproj
    env:
      DOTNET_VERSION: $(dotnetVersion)

  - task: DotNetCoreCLI@2
    displayName: 'Run E2E AspNetCore Tests'
    condition: ne(variables['dotnetVersion'], 'netfx')  # Skip if dotnetVersion is netfx
    inputs:
      command: test
      arguments: -v n --no-build -c Release --filter "FullyQualifiedName~Microsoft.Azure.Functions.Worker.E2ETests.AspNetCore" # only AspNetCore tests
      projects: |
        **\E2ETests.csproj
    env:
      DOTNET_VERSION: $(dotnetVersion)
