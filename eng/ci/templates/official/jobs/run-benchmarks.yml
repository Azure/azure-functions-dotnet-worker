parameters:
- name: functionAppName
  type: string
- name: description
  type: string
- name: os
  type: string
  default: Windows
  values:
    - Windows
    - Linux

jobs:
- job: ${{ parameters.functionAppName }}_${{ parameters.os }}

  ${{ if eq(parameters.os, 'Linux') }}:
    pool:
      name: 1es-pool-azfunc-benchmarking-large
      image: 1es-ubuntu-22.04-benchmark-runner-vanilla
      os: linux 
  ${{ else }}:
    pool:
      name: 1es-pool-azfunc-benchmarking-large
      image: 1es-windows-2022-benchmark-runner-vanilla
      os: windows
  
  variables:
    agentId: ${{ parameters.functionAppName }}${{ parameters.os }}
    runDescription: ${{ parameters.description }}
    functionApp: ${{ parameters.functionAppName }}
    benchmarkArtifactName: benchmark_results_$(Agent.OS)_$(functionApp)
    functionAppOutputPath: $(Build.ArtifactStagingDirectory)/FunctionApps/$(functionApp)
    benchmarkResultsJsonPath: $(Build.ArtifactStagingDirectory)/BenchmarkResults/$(Build.BuildNumber)_$(functionApp).json
    functionsWorkerRuntime: 'dotnet-isolated'
    configFilePath: "./eng/perf/http.benchmarks.yml"
    hostLocation: "./../../"
    baselineBenchmarkResultFilePath: ''
    baselineBenchmarkResultsDownloadDir: $(Pipeline.Workspace)/BenchmarkBaselineResult
    appAgentHostName: ''

  templateContext:
    inputs:
    - input: pipelineArtifact
      artifactName: $(benchmarkArtifactName)
      pipeline: BaselineResult
      targetPath: $(baselineBenchmarkResultsDownloadDir)

    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: Publish benchmark results
      path: $(benchmarkResultsJsonPath)
      artifact: $(benchmarkArtifactName)

  steps:

  - task: AzureKeyVault@2
    condition: and(succeeded(), eq(variables['storeBenchmarkResultsInDatabase'], true))
    inputs:
      azureSubscription: Azure-Functions-Host-CI-internal
      KeyVaultName: functions-perf-crank-kv
      SecretsFilter: BenchmarkResultsSqlConnectionString
      RunAsPreJob: false

  - template: /eng/ci/templates/install-dotnet.yml@self

  - script: dotnet tool install -g Microsoft.Crank.Agent --version "0.2.0-*"
    displayName: Install Microsoft.Crank.Agent tool

  - script: dotnet tool install -g Microsoft.Crank.Controller --version "0.2.0-*"
    displayName: Install Microsoft.Crank.Controller tool

  - ${{ if eq(parameters.os, 'Windows') }}:
    - pwsh: Start-Process powershell -ArgumentList '-NoExit', '-Command', 'crank-agent'
      displayName: Start crank-agent
  - ${{ else }}:
    - script: |
        nohup crank-agent &
      displayName: Start crank-agent

  - task: AzureCLI@2
    displayName: Get Remote Agent IP Address
    inputs:
      azureSubscription: $(ServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $maxAttempts = 60
        $attempt = 0

        do {
          $Entity = az storage entity show `
            --account-name $(StorageAccount) `
            --auth-mode login `
            --table-name $(BenchmarkAgentInfoTableName) `
            --partition-key $(Build.BuildNumber) `
            --row-key $(agentId) `
            --select HostName

          if ($Entity) {
            $HostName = ($Entity | ConvertFrom-Json).HostName
            Write-Host "##vso[task.setvariable variable=appAgentHostName]$HostName"
            break
          } else {
            Write-Host "Entity not found. Retrying in 30 seconds..."
            Start-Sleep -Seconds 30
            $attempt++
          }

          if ($attempt -ge $maxAttempts) {
            Write-Host "Maximum attempts reached. Exiting..."
            exit 1
          }
        } while (-not $Entity)

  - pwsh: |
        $crankArgs = "--config $(configFilePath) --scenario hellohttp --profile win2022 --load.options.reuseBuild true --description `"$(runDescription)`" --command-line-property --no-measurements --json $(benchmarkResultsJsonPath) --property sourceVersion=$(Build.SourceVersion) --property buildNumber=$(Build.BuildNumber) --property buildId=$(Build.BuildId) --property sourceBranch=$(Build.SourceBranch) --variable FunctionsWorkerRuntime=$(functionsWorkerRuntime) --variable HostLocation=$(hostLocation) --variable FunctionAppPath=$(functionAppOutputPath)"
        $crankArgs += " --variable CrankAgentAppVm=$(appAgentHostName) --variable CrankAgentLoadVm=localhost --variable AspNetUrls=http://$(appAgentHostName):5000"
        $crankArgs += " $(AdditionalCrankArguments)"
        $command = "crank $crankArgs"

        if ('${{ variables['storeBenchmarkResultsInDatabase'] }}' -eq 'true') {
            $command += " --table HttpBenchmarks --sql `"$(BenchmarkResultsSqlConnectionString)`""
        }

        Write-Host "Running command: $command"
        Invoke-Expression $command
    displayName: Run Benchmark

  - pwsh: |
      $url = "http://$(appAgentHostName):5010/jobs/1/output"
      Write-Host "Fetching logs from: $url"
      $response = Invoke-WebRequest -Uri $url -Method GET -UseBasicParsing
      Write-Host $response.Content
    displayName: Fetch Function Host Logs

  # Tag the build as a baseline if it originates from the specified branch.
  # Baseline builds serve as reference points for performance comparisons in future builds.
  # The tag added here will help identify these builds in the pipeline.
  - pwsh: |
      Write-Host "##vso[build.addbuildtag]$(benchmarkBaselineTagName)"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], variables['benchmarkBaselineBranch']))
    displayName: 'Tag Build as Baseline'

  # Locate baseline benchmark result file from the downloaded baseline artifact.
  - pwsh: |
      $baselineDir = "$(baselineBenchmarkResultsDownloadDir)"
      $fileNamePattern = "*_$(functionApp).json"

      if (Test-Path $baselineDir -PathType Container) {
          $baselineFile = Get-ChildItem -Path $baselineDir -Filter $fileNamePattern | Select-Object -First 1

          if ($baselineFile) {
              Write-Host "Found baseline benchmark result file: $($baselineFile.FullName)"
              Write-Host "##vso[task.setvariable variable=baselineBenchmarkResultFilePath]$($baselineFile.FullName)"
          } else {
              Write-Host "No baseline benchmark result file matching the pattern '$fileNamePattern' found in directory '$baselineDir'."
          }
      } else {
          Write-Host "The specified directory '$baselineDir' does not exist."
      }
    displayName: 'Set Baseline Benchmark Result File Path'

  # Compare results with baseline
  - pwsh: |
      crank compare "$(baselineBenchmarkResultFilePath)" "$(benchmarkResultsJsonPath)"
    condition: and(succeeded(), ne(variables['baselineBenchmarkResultFilePath'], ''))
    displayName: 'Compare Results with Baseline'
