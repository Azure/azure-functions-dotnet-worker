trigger:
  branches:
    include:
      - main
      - release/*
  paths:
    include:
      - host/src/
pr:
  branches:
    include:
      - main
      - release/*
  paths:
    include:
      - host/src/

stages:
  - stage: BuildAndPublish
    displayName: "Publish (Windows & Linux)"
    jobs:
      - job: BuildAndPublishLinux
        displayName: 'Publish on Linux'
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          - task: UseDotNet@2
            inputs:
              version: '7.x'

          - script: |
              sudo apt-get install clang zlib1g-dev
              
          - task: DotnetCoreCLI@2
            displayName: 'Dotnet Publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              zipAfterPublish: false
              arguments: '-c Release -r linux-x64 -o $(Build.ArtifactStagingDirectory)/output/linux -p:FUNCTIONS_CONSTANTS=LINUX'
              workingDirectory: $(Build.SourcesDirectory)/host/src/FunctionsNetHost

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/output/linux'
              artifact: 'linux_publish_output'
              
      - job: BuildAndPublishWindows
        displayName: 'Publish on Windows'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UseDotNet@2
            inputs:
              version: '7.x'

          - task: DotnetCoreCLI@2
            displayName: 'Dotnet Publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              zipAfterPublish: false
              arguments: '-c Release -r win-x64 -o $(Build.ArtifactStagingDirectory)/output/windows'
              workingDirectory: $(Build.SourcesDirectory)/host/src/FunctionsNetHost
          
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)/output/windows'
              Contents: '**/*.exe'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/output/windows_filtered'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/output/windows_filtered'
              artifact: 'windows_publish_output'

  - stage: ConsolidateArtifacts
    displayName: 'Consolidate Artifacts'
    dependsOn: BuildAndPublish
    jobs:
      - job: ConsolidateArtifacts
        displayName: 'Consolidate Artifacts'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UseDotNet@2
            inputs:
              version: '7.x'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifacts from Linux build'
            inputs:
              artifactName: 'linux_publish_output'
              path: '$(Build.ArtifactStagingDirectory)/linux_output'
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifacts from Windows build'
            inputs:
              artifactName: 'windows_publish_output'
              path: '$(Build.ArtifactStagingDirectory)/windows_output'

          - task: CopyFiles@2
            displayName: 'Copy files from linux artifacts to dist dir'
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)/linux_output'
              TargetFolder: '$(Build.SourcesDirectory)/host/dist/linux'

          - task: CopyFiles@2
            displayName: 'Copy files from Windows artifacts to dist dir'
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)/windows_output'
              TargetFolder: '$(Build.SourcesDirectory)/host/dist/windows'

          - task: NuGetCommand@2
            displayName: "Nuget pack"
            inputs:
              command: "pack"
              packagesToPack: "$(Build.SourcesDirectory)/host/tools/build/Microsoft.Azure.Functions.DotnetIsolatedNativeHost.nuspec"
              versioningScheme: "off"
              packDestination: "$(Build.ArtifactStagingDirectory)/host/dist/nuget"
              basePath: "$(Build.SourcesDirectory)/host/tools/build"

          # Publish artifacts.
          - publish: $(Build.ArtifactStagingDirectory)/host/dist/nuget
            artifact: drop
