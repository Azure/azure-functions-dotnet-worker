trigger:
  branches:
    include:
      - main
      - release/*
      - feature/*
  paths:
    include:
      - host/src/
pr:
  branches:
    include:
      - main
      - release/*
      - feature/*
  paths:
    include:
      - host/src/
stages:
  - stage: BuildAndPublishPrelaunchApps
    displayName: "Publish PrelaunchApps/App.csproj for NET 8.0 and NET 7.0"
    jobs:
      - job: BuildAndPublishLinux
        displayName: "Publish on Prelaunch apps"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            inputs:
              version: "8.x"

          - task: DotNetCoreCLI@2
            displayName: "Dotnet publish(NET8) App.csproj"
            inputs:
              command: "publish"
              publishWebProjects: false
              zipAfterPublish: false
              arguments: "--configuration Release --output $(Build.ArtifactStagingDirectory)/PrelaunchApp/8.0 --framework net8.0 -p:UseAppHost=false"
              projects: "host/src/PrelaunchApp/App.csproj"

          - task: DotNetCoreCLI@2
            displayName: "Dotnet publish(NET7) App.csproj"
            inputs:
              command: "publish"
              publishWebProjects: false
              zipAfterPublish: false
              arguments: "--configuration Release --output $(Build.ArtifactStagingDirectory)/PrelaunchApp/7.0 --framework net7.0"
              projects: "host/src/PrelaunchApp/App.csproj"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/PrelaunchApp"
              artifact: "prelaunch_app_publish_output"

  - stage: BuildAndPublish
    displayName: "Dotnet Publish(W+L)"
    jobs:
      - job: BuildAndPublishLinux
        displayName: "Publish on Linux"
        pool:
          vmImage: "ubuntu-20.04"
        steps:
          - task: UseDotNet@2
            inputs:
              version: "8.x"
              includePreviewVersions: true

          - script: |
              sudo apt-get install clang zlib1g-dev

          - task: DotnetCoreCLI@2
            displayName: "Dotnet Publish"
            inputs:
              command: "publish"
              publishWebProjects: false
              zipAfterPublish: false
              arguments: "-c Release -r linux-x64 -o $(Build.ArtifactStagingDirectory)/output/linux"
              workingDirectory: $(Build.SourcesDirectory)/host/src/FunctionsNetHost

          - task: CopyFiles@2
            displayName: "Copy needed files"
            inputs:
              SourceFolder: "$(Build.ArtifactStagingDirectory)/output/linux"
              # Publish output will include many other files. We only need the FunctionsNetHost, FunctionsNetHost.dbg & libnethost.so
              Contents: |
                FunctionsNetHost
                FunctionsNetHost.dbg
                libnethost.so
              TargetFolder: "$(Build.ArtifactStagingDirectory)/output/linux_filtered"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/output/linux_filtered"
              artifact: "linux_publish_output"

      - job: BuildAndPublishWindows
        displayName: "Publish on Windows"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            inputs:
              version: "8.x"
              includePreviewVersions: true

          - task: DotnetCoreCLI@2
            displayName: "Dotnet Publish"
            inputs:
              command: "publish"
              publishWebProjects: false
              zipAfterPublish: false
              arguments: "-c Release -r win-x64 -o $(Build.ArtifactStagingDirectory)/output/windows"
              workingDirectory: $(Build.SourcesDirectory)/host/src/FunctionsNetHost

          - task: CopyFiles@2
            displayName: "Copy needed files"
            inputs:
              SourceFolder: "$(Build.ArtifactStagingDirectory)/output/windows"
              # Publish output will include many other files. We only need FunctionsNetHost.exe, pdb & nethost.dll
              Contents: |
                FunctionsNetHost.exe
                FunctionsNetHost.pdb
                nethost.dll
              TargetFolder: "$(Build.ArtifactStagingDirectory)/output/windows_filtered"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/output/windows_filtered"
              artifact: "windows_publish_output"

  - stage: ConsolidateArtifacts
    displayName: "Nuget Publish"
    dependsOn: BuildAndPublish
    jobs:
      - job: ConsolidateArtifacts
        displayName: "Consolidate Artifacts"
        pool:
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            inputs:
              version: "7.x"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Artifacts from Linux build"
            inputs:
              artifactName: "linux_publish_output"
              path: "$(Build.ArtifactStagingDirectory)/linux_output"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Artifacts from Windows build"
            inputs:
              artifactName: "windows_publish_output"
              path: "$(Build.ArtifactStagingDirectory)/windows_output"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Artifacts from Prelaunch app publish"
            inputs:
              artifactName: "prelaunch_app_publish_output"
              path: "$(Build.ArtifactStagingDirectory)/prelaunch_app_output"

          - task: CopyFiles@2
            displayName: "Copy files from linux artifacts to dist dir"
            inputs:
              SourceFolder: "$(Build.ArtifactStagingDirectory)/linux_output"
              TargetFolder: "$(Build.SourcesDirectory)/host/dist/linux"

          - task: CopyFiles@2
            displayName: "Copy files from Windows artifacts to dist dir"
            inputs:
              SourceFolder: "$(Build.ArtifactStagingDirectory)/windows_output"
              TargetFolder: "$(Build.SourcesDirectory)/host/dist/windows"

          - task: CopyFiles@2
            displayName: "Copy prelaunch app files to dist dir"
            inputs:
              SourceFolder: "$(Build.ArtifactStagingDirectory)/prelaunch_app_output"
              TargetFolder: "$(Build.SourcesDirectory)/host/dist/portable"

          - task: NuGetCommand@2
            displayName: "Nuget pack"
            inputs:
              command: "pack"
              packagesToPack: "$(Build.SourcesDirectory)/host/tools/build/Microsoft.Azure.Functions.DotnetIsolatedNativeHost.nuspec"
              versioningScheme: "off"
              packDestination: "$(Build.ArtifactStagingDirectory)/host/dist/nuget"
              basePath: "$(Build.SourcesDirectory)/host/tools/build"

          # Publish artifacts.
          - publish: $(Build.ArtifactStagingDirectory)/host/dist/nuget
            artifact: drop
