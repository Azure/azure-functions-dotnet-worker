// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis.Text;

namespace Microsoft.Azure.Functions.Worker.Sdk.Generators
{
    public partial class ExtensionStartupRunnerGenerator
    {
        internal static class Emitter
        {
            public static SourceText Emit(IEnumerable<string> extensionStartupTypeNames,
                CancellationToken cancellationToken)
            {
                cancellationToken.ThrowIfCancellationRequested();

                SourceText sourceText;
                using var stringWriter = new StringWriter();
                using (var textWriter = new IndentedTextWriter(stringWriter))
                {
                    textWriter.WriteLine("// <auto-generated/>");
                    textWriter.WriteLine("using System;");
                    textWriter.WriteLine("using Microsoft.Azure.Functions.Worker.Core;");
                    WriteAssemblyAttribute(textWriter);
                    textWriter.WriteLine("namespace Microsoft.Azure.Functions.Worker");
                    textWriter.WriteLine("{");
                    textWriter.Indent++;
                    WriteStartupCodeExecutorClass(textWriter, extensionStartupTypeNames);
                    textWriter.Indent--;
                    textWriter.WriteLine("}");

                    textWriter.Flush();
                    sourceText = SourceText.From(stringWriter.ToString(), encoding: Encoding.UTF8);
                }

                return sourceText;
            }

            /// <summary>
            /// Writes an assembly attribute with type information about our auto generated WorkerExtensionStartupCodeExecutor class.
            /// </summary>
            private static void WriteAssemblyAttribute(IndentedTextWriter textWriter)
            {
                textWriter.WriteLine(
                    "[assembly: WorkerExtensionStartupCodeExecutorInfo(typeof(Microsoft.Azure.Functions.Worker.WorkerExtensionStartupCodeExecutor))]");
            }

            private static void WriteStartupCodeExecutorClass(IndentedTextWriter textWriter,
                IEnumerable<string> startupTypeNames)
            {
                textWriter.WriteLine("internal class WorkerExtensionStartupCodeExecutor : WorkerExtensionStartup");
                textWriter.WriteLine("{");
                textWriter.Indent++;
                textWriter.WriteLine("public override void Configure(IFunctionsWorkerApplicationBuilder applicationBuilder)");
                textWriter.WriteLine("{");
                textWriter.Indent++;

                foreach (var typeName in startupTypeNames)
                {
                    textWriter.WriteLine("try");
                    textWriter.WriteLine("{");
                    textWriter.Indent++;

                    textWriter.WriteLine($"new {typeName}().Configure(applicationBuilder);");

                    textWriter.Indent--;
                    textWriter.WriteLine("}");
                    textWriter.WriteLine("catch (Exception ex)");
                    textWriter.WriteLine("{");
                    textWriter.Indent++;
                    textWriter.WriteLine($"Console.Error.WriteLine(\"Error calling Configure on {typeName} instance.\"+ex.ToString());");
                    textWriter.Indent--;
                    textWriter.WriteLine("}");
                }

                textWriter.Indent--;
                textWriter.WriteLine("}");
                textWriter.Indent--;
                textWriter.WriteLine("}");
            }
        }
    }
}
