// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
namespace Microsoft.Azure.Functions.Worker.Sdk.Generators
{
    /// <summary>
    /// Generates a class with a method which has code to call the "Configure" method
    /// of each of the participating extension's "IWorkerExtensionStartup" implementations.
    /// Also adds the assembly attribute "WorkerExtensionStartupCodeExecutorInfo"
    /// and pass the information(the type) about the class we generated.
    /// We are implementing the IWorkerExtensionStartup interface on the generated class.
    /// (This is the same interface exetension authors will implement for their extension specific startup code)
    /// We need the same signature as the extension's implementation as our class is an uber class which internally
    /// calls each of the extension's implementations.
    /// </summary>

    // Sample code generated (with one extensions particiapating in startup hook)
    // There will be one try-catch block for each extension particiapating in startup hook.
    
    //[assembly: WorkerExtensionStartupCodeExecutorInfo(typeof(Microsoft.Azure.Functions.Worker.WorkerExtensionStartupCodeExecutor))]
    //
    //internal class WorkerExtensionStartupCodeExecutor : IWorkerExtensionStartup
    //{
    //    public void Configure(IFunctionsWorkerApplicationBuilder applicationBuilder)
    //    {
    //        try
    //        {
    //            new Microsoft.Azure.Functions.Worker.Extensions.Http.MyHttpExtensionStartup().Configure(applicationBuilder);
    //        }
    //        catch (Exception ex)
    //        {
    //            Console.WriteLine("Error calling Configure on Microsoft.Azure.Functions.Worker.Extensions.Http.MyHttpExtensionStartup instance." + ex.ToString());
    //        }
    //    }
    //}

    [Generator]
    public class ExtensionStartupRunnerGenerator : ISourceGenerator
    {
        /// <summary>
        /// The attribute which extension authors will apply on an assembly which contains their startup type.
        /// </summary>
        private string attributeTypeName = "WorkerExtensionStartupAttribute";

        /// <summary>
        /// Fully qualified name of the above "WorkerExtensionStartupAttribute" attribute.
        /// </summary>
        private string attributeTypeFullName = "Microsoft.Azure.Functions.Worker.Core.WorkerExtensionStartupAttribute";

        public void Execute(GeneratorExecutionContext context)
        {
            var startupTypeNames = GetStartupImplementationTypeNames(context);

            if (!startupTypeNames.Any())
            {
                return;
            }

            SourceText sourceText;
            using (var stringWriter = new StringWriter())
            using (var indentedTextWriter = new IndentedTextWriter(stringWriter))
            {
                indentedTextWriter.WriteLine("// <auto-generated/>");
                indentedTextWriter.WriteLine("using System;");
                indentedTextWriter.WriteLine("using Microsoft.Azure.Functions.Worker.Core;");
                WriteAssemblyAttribute(indentedTextWriter);
                indentedTextWriter.WriteLine("namespace Microsoft.Azure.Functions.Worker");
                indentedTextWriter.WriteLine("{");
                indentedTextWriter.Indent++;
                WriteStartupCodeExecutorClass(indentedTextWriter, startupTypeNames);
                indentedTextWriter.Indent--;
                indentedTextWriter.WriteLine("}");

                indentedTextWriter.Flush();
                sourceText = SourceText.From(stringWriter.ToString(), encoding: Encoding.UTF8);
            }

            // Add the source code to the compilation
            context.AddSource($"WorkerExtensionStartupCodeExecutor.g.cs", sourceText);
        }

        /// <summary>
        /// Gets the type names of extension startup implementations
        /// from each of the participating extensions.
        /// </summary>
        private IEnumerable<string> GetStartupImplementationTypeNames(GeneratorExecutionContext context)
        {
            var typeNames = new List<string>();

            // Extension authors should decorate their assembly with "WorkerExtensionStartup" attribute
            // if they want to participate in startup.
            foreach (var assembly in context.Compilation.SourceModule.ReferencedAssemblySymbols)
            {
                var extensionStartupAttribute = assembly.GetAttributes()
                                                        .FirstOrDefault(a => a.AttributeClass?.Name == attributeTypeName &&
                                                                        //Call GetFullName only if class name matches.
                                                                        a.AttributeClass.GetFullName() == attributeTypeFullName);
                if (extensionStartupAttribute != null)
                {
                    // WorkerExtensionStartup has a constructor with one parameter, the type of startup implementation class.
                    TypedConstant firstConstructorParam = extensionStartupAttribute.ConstructorArguments[0];
                    if (firstConstructorParam.Value is ITypeSymbol typeSymbol)
                    {
                        var fullTypeName = typeSymbol.ToDisplayString();
                        typeNames.Add(fullTypeName);
                    }
                }
            }

            return typeNames;
        }

        /// <summary>
        /// Writes an assembly attribute with type information about our auto generated WorkerExtensionStartupCodeExecutor class.
        /// </summary>
        private static void WriteAssemblyAttribute(IndentedTextWriter textWriter)
        {
            textWriter.WriteLine(
                "[assembly: WorkerExtensionStartupCodeExecutorInfo(typeof(Microsoft.Azure.Functions.Worker.WorkerExtensionStartupCodeExecutor))]");
        }

        /// <summary>
        /// Writes a class with code which calls the Configure method on each implementation of participating extensions.
        /// We also have it implement the same "IWorkerExtensionStartup" interface which extension authors implement.
        /// </summary>
        private static void WriteStartupCodeExecutorClass(IndentedTextWriter textWriter, IEnumerable<string> typeNames)
        {
            textWriter.WriteLine("internal class WorkerExtensionStartupCodeExecutor : IWorkerExtensionStartup");
            textWriter.WriteLine("{");
            textWriter.Indent++;
            textWriter.WriteLine("public void Configure(IFunctionsWorkerApplicationBuilder applicationBuilder)");
            textWriter.WriteLine("{");
            textWriter.Indent++;

            foreach (var fullyQualifiedTpeName in typeNames)
            {
                textWriter.WriteLine("try");
                textWriter.WriteLine("{");
                textWriter.Indent++;
                textWriter.WriteLine($"new {fullyQualifiedTpeName}().Configure(applicationBuilder);");
                textWriter.Indent--;
                textWriter.WriteLine("}");
                textWriter.WriteLine("catch (Exception ex)");
                textWriter.WriteLine("{");
                textWriter.Indent++;
                textWriter.WriteLine($"Console.WriteLine(\"Error calling Configure on {fullyQualifiedTpeName} instance.\"+ex.ToString());");
                textWriter.Indent--;
                textWriter.WriteLine("}");
            }

            textWriter.Indent--;
            textWriter.WriteLine("}");
            textWriter.Indent--;
            textWriter.WriteLine("}");
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
    }
}
