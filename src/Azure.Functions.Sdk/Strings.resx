<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string"/>
                            <xsd:attribute name="type" type="xsd:string"/>
                            <xsd:attribute name="mimetype" type="xsd:string"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string"/>
                            <xsd:attribute name="name" type="xsd:string"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
                            <xsd:attribute ref="xml:space"/>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required"/>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="AZFW0100_Error_CannotRunFuncCli" xml:space="preserve">
        <value>Unable to launch the Azure Functions Core Tools. Please visit https://aka.ms/azfunc-dotnet-run-error for more details on how to address this problem.</value>
    </data>
    <data name="AZFW0101_Error_ExtensionPackageConflict" xml:space="preserve">
        <value>The AzureFunctionsExtensionPackage {0}/{1} conflicts with existing package  {0}/{2}</value>
    </data>
    <data name="AZFW0102_Warning_ExtensionPackageDuplicate" xml:space="preserve">
        <value>Duplicate extension package found: {0}/{1}</value>
    </data>
    <data name="AZFW0103_Error_InvalidExtensionPackageVersion" xml:space="preserve">
        <value>The Invalid version for AzureFunctionsExtensionPackage '{0}': '{1}'. Ensure the Version metadata on this item is a valid NuGet package version.</value>
    </data>
    <data name="AZFW0104_Warning_EndOfLifeFunctionsVersion" xml:space="preserve">
        <value>Azure Functions '{0}' is out of support and will not receive security updates in the future. Please refer to https://aka.ms/azure-functions-retired-versions for more information on the support policy.</value>
    </data>
    <data name="AZFW0105_Error_UsingLegacyFunctionsSdk" xml:space="preserve">
        <value>Microsoft.NET.Sdk.Functions package is meant to be used with in-proc function apps. Please remove the reference to this package.</value>
    </data>
    <data name="AZFW0106_Error_UnknownFunctionsVersion" xml:space="preserve">
        <value>The AzureFunctionsVersion '{0}' is unknown or not supported.</value>
    </data>
    <data name="AZFW0107_Warning_UnsupportedTargetFramework" xml:space="preserve">
        <value>Target framework '{0}' is not supported by Azure Functions. Please see https://learn.microsoft.com/azure/azure-functions/functions-versions?tabs=isolated-process%2Cv4&amp;pivots=programming-language-csharp#languages for in-support versions.</value>
    </data>
    <data name="Deploy_AsyncDeployment" xml:space="preserve">
        <value>Asynchronous deployment. Polling status at {0}</value>
    </data>
    <data name="Deploy_BeginPublish" xml:space="preserve">
        <value>Publishing {0} to {1}</value>
    </data>
    <data name="Deploy_CompletedFailure" xml:space="preserve">
        <value>Failed to publish {0} to {1}.  Status: {2}</value>
    </data>
    <data name="Deploy_CompletedSuccess" xml:space="preserve">
        <value>Successfully published {0} to {1}. Status: {2}</value>
    </data>
    <data name="Deploy_Failed" xml:space="preserve">
        <value>Zip deployment to {0} has failed.\n    {1}\n    HTTP Status: {2}\n    Deployment Status: {3}</value>
    </data>
    <data name="Deploy_InvalidPublishUrl" xml:space="preserve">
        <value>The publish url '{0}' is invalid. Publish url must be an absolute HTTP or HTTPS url.</value>
    </data>
    <data name="Deploy_PollFailure" xml:space="preserve">
        <value>Failed to poll '{0}'. HTTP Status: {1}. Retry count {2}/{3}</value>
    </data>
    <data name="Deploy_Status" xml:space="preserve">
        <value>Deployment status is {0}.</value>
    </data>
    <data name="Deploy_StatusWithText" xml:space="preserve">
        <value>Deployment status is {0}: {1}</value>
    </data>
</root>