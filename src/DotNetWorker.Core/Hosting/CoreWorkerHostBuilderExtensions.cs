// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System;
using System.Linq;
using System.Reflection;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.DependencyInjection;

namespace Microsoft.Extensions.Hosting
{
    /// <summary>
    /// Provides extension methods to work with a <see cref="IHostBuilder"/>.
    /// </summary>
    public static class CoreWorkerHostBuilderExtensions
    {
        /// <summary>
        /// Configures the core set of Functions Worker services to the provided <see cref="IHostBuilder"/>,
        /// with a delegate to configure a provided <see cref="HostBuilderContext"/> and an <see cref="IFunctionsWorkerApplicationBuilder"/>,
        /// and a delegate to configure the <see cref="WorkerOptions"/>.
        /// NOTE: You must configure required services for an operational worker when using this method.
        /// </summary>
        /// <param name="builder">The <see cref="IHostBuilder"/> to configure.</param>
        /// <param name="configure">A delegate that will be invoked to configure the provided <see cref="HostBuilderContext"/> and an <see cref="IFunctionsWorkerApplicationBuilder"/>.</param>
        /// <param name="configureOptions">A delegate that will be invoked to configure the provided <see cref="WorkerOptions"/>.</param>
        /// <returns>The <see cref="IHostBuilder"/>.</returns>
        public static IHostBuilder ConfigureFunctionsWorker(this IHostBuilder builder, Action<HostBuilderContext, IFunctionsWorkerApplicationBuilder> configure, Action<WorkerOptions> configureOptions)
        {
            if (configure is null)
            {
                throw new ArgumentNullException(nameof(configure));
            }

            builder.ConfigureServices((context, services) =>
            {
                IFunctionsWorkerApplicationBuilder appBuilder = services.AddFunctionsWorkerCore(configureOptions);

                configure(context, appBuilder);
            });

            return builder;
        }

        /// <summary>
        /// Invokes auto-generated configure methods for a given <see cref="IHostBuilder"/> instance.
        /// This method searches for extension methods decorated with the following attributes:
        ///   - <see cref="AutoGeneratedClassAttribute"/>: Marks classes containing auto-generated extension methods.
        ///   - <see cref="AutoGeneratedHostBuilderConfigureMethodAttribute"/>: Marks auto-generated extension methods 
        ///     within the classes that configure the <see cref="IHostBuilder"/>.
        /// Once identified, these extension methods are executed to configure the host builder.
        /// </summary>
        /// <param name="builder">The <see cref="IHostBuilder"/> instance.</param>
        public static IHostBuilder InvokeAutoGeneratedConfigureMethods(this IHostBuilder builder)
        {
            var autoGeneratedExtensionMethods = Assembly.GetEntryAssembly()!
                .GetTypes().Where(t => t.IsDefined(typeof(AutoGeneratedClassAttribute), inherit: false))
                .SelectMany(t => t.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.DeclaredOnly))
                .Where(IsAutoGeneratedExtensionMethodForHostBuilder);

            // Invoke the extension methods
            var parameterValues = new object[] { builder };
            foreach (var method in autoGeneratedExtensionMethods)
            {
                method.Invoke(obj: null, parameters: parameterValues);
            }

            return builder;
        }

        /// <summary>
        /// Checks whether a given method is an extension method for <see cref="IHostBuilder"/> auto generated by functions sdk.
        /// </summary>
        /// <param name="method">The <see cref="MethodInfo"/> representing the method to be checked.</param>
        /// <returns>
        /// true if the method is an extension method for <see cref="IHostBuilder"/> and has
        /// the <see cref="AutoGeneratedHostBuilderConfigureMethodAttribute"/> decoration on it
        /// otherwise, false.
        /// </returns>
        private static bool IsAutoGeneratedExtensionMethodForHostBuilder(MethodInfo method)
        {
            return method.IsDefined(typeof(System.Runtime.CompilerServices.ExtensionAttribute), inherit: false)
                   && method.IsDefined(typeof(AutoGeneratedHostBuilderConfigureMethodAttribute))
                   && method.GetParameters().Length > 0
                   && method.GetParameters()[0].ParameterType == typeof(IHostBuilder);
        }
    }
}
