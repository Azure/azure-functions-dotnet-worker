// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Tests.WorkerExtensionsSample;
using Microsoft.Azure.Functions.Worker.Sdk.Generators;
using Xunit;
namespace Sdk.Generator.Tests
{
    public class ExtensionStartupRunnerGeneratorTests
    {
        const string InputCode = @"
public class Foo
{
}";
        [Fact]
        public async Task StartupExecutorCodeGetsGenerated()
        {
            // Source generation is based on referenced assembly.
            var referencedExtensionAssemblies = new[]
            {
                typeof(SampleExtensionStartup).Assembly,
            };

            string expectedGeneratedFileName = $"WorkerExtensionStartupCodeExecutor.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using Microsoft.Azure.Functions.Worker.Core;
[assembly: WorkerExtensionStartupCodeExecutorInfo(typeof(Microsoft.Azure.Functions.Worker.WorkerExtensionStartupCodeExecutor))]
namespace Microsoft.Azure.Functions.Worker
{
    internal class WorkerExtensionStartupCodeExecutor : WorkerExtensionStartup
    {
        public override void Configure(IFunctionsWorkerApplicationBuilder applicationBuilder)
        {
            try
            {
                new Microsoft.Azure.Functions.Tests.WorkerExtensionsSample.SampleExtensionStartup().Configure(applicationBuilder);
            }
            catch (Exception ex)
            {
                Console.WriteLine('Error calling Configure on Microsoft.Azure.Functions.Tests.WorkerExtensionsSample.SampleExtensionStartup instance.'+ex.ToString());
            }
        }
    }
}
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<ExtensionStartupRunnerGenerator>(
                referencedExtensionAssemblies,
                InputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        [Fact]
        public async Task StartupExecutorCodeDoesNotGetsGeneratedWheNoExtensionAssembliesAreReferenced()
        {
            // source gen will happen only when an assembly with worker startup type is defined.
            var referencedExtensionAssemblies = Array.Empty<System.Reflection.Assembly>();

            string? expectedGeneratedFileName = null;
            string? expectedOutput = null;

            await TestHelpers.RunTestAsync<ExtensionStartupRunnerGenerator>(
                referencedExtensionAssemblies,
                InputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }
    }
}
