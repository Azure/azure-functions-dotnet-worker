using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Tests.WorkerExtensionsSample;
using Microsoft.Azure.Functions.Worker.Sdk.Generators;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public class ExtensionStartupRunnerGeneratorV2Tests
    {
        [Fact]
        public async Task TestBaseline_TestWithDynamicLogLevel_Success()
        {
            var referencedExtensionAssemblies = new[]
            {
                typeof(SampleExtensionStartup).Assembly,
            };

            string testSourceCode = @"
public sealed class Sample
{

}";
            string expectedOutput = @"// <auto-generated/>
using System;
using Microsoft.Azure.Functions.Worker.Core;
[assembly: WorkerExtensionStartupCodeExecutorInfo(typeof(Microsoft.Azure.Functions.Worker.WorkerExtensionStartupCodeExecutor))]
namespace Microsoft.Azure.Functions.Worker
{
    internal class WorkerExtensionStartupCodeExecutor : WorkerExtensionStartup
    {
        public override void Configure(IFunctionsWorkerApplicationBuilder applicationBuilder)
        {
            try
            {
                new Microsoft.Azure.Functions.Tests.WorkerExtensionsSample.SampleExtensionStartup().Configure(applicationBuilder);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(""Error calling Configure on Microsoft.Azure.Functions.Tests.WorkerExtensionsSample.SampleExtensionStartup instance.""+ex.ToString());
            }
        }
    }
}
";

            await VerifyAgainstBaselineUsingFile(referencedExtensionAssemblies, testSourceCode, expectedOutput);
        }

        private async Task VerifyAgainstBaselineUsingFile(IEnumerable<Assembly> extensionAssemblyReferences, string inputSource, string expectedOutput)
        {
            var (diagnosticEntries, generatedSourceEntries) = await RoslynTestUtils.RunGenerator(
                new ExtensionStartupRunnerGeneratorV2(),
                extensionAssemblyReferences,
                new[] { inputSource }).ConfigureAwait(false);

            Assert.Empty(diagnosticEntries);
            Assert.Single(generatedSourceEntries);
            var actualSourceText = generatedSourceEntries[0].SourceText.ToString();

            Assert.Equal(expectedOutput, actualSourceText);
        }
    }
}
