// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Sdk.Generators;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public partial class FunctionExecutorGeneratorTests
    {
        public class DependentAssemblyTest
        {
            private readonly Assembly[] _referencedAssemblies;

            public DependentAssemblyTest()
            {
                var abstractionsExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Abstractions.dll");
                var httpExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Http.dll");
                var hostingExtension = typeof(HostBuilder).Assembly;
                var diExtension = typeof(DefaultServiceProviderFactory).Assembly;
                var hostingAbExtension = typeof(IHost).Assembly;
                var diAbExtension = typeof(IServiceCollection).Assembly;
                var dependentAssembly = Assembly.LoadFrom("DependentAssemblyWithFunctions.dll");

                _referencedAssemblies = new[]
                {
                    abstractionsExtension,
                    httpExtension,
                    hostingExtension,
                    hostingAbExtension,
                    diExtension,
                    diAbExtension,
                    dependentAssembly
                };
            }

            [Fact]
            public async Task FunctionsFromDependentAssembly()
            {
                const string inputSourceCode = """
                                               using System;
                                               using Microsoft.Azure.Functions.Worker;
                                               using Microsoft.Azure.Functions.Worker.Http;
                                               namespace MyCompany
                                               {
                                                   public class MyHttpTriggers
                                                   {
                                                       [Function("FunctionA")]
                                                       public HttpResponseData Foo([HttpTrigger(AuthorizationLevel.User, "get")] HttpRequestData r, FunctionContext c)
                                                       {
                                                           return r.CreateResponse(System.Net.HttpStatusCode.OK);
                                                       }
                                                   }
                                               }
                                               """;
                var expected = $$"""
                                       // <auto-generated/>
                                       using System;
                                       using System.Threading.Tasks;
                                       using System.Collections.Generic;
                                       using Microsoft.Extensions.Hosting;
                                       using Microsoft.Extensions.DependencyInjection;
                                       using Microsoft.Azure.Functions.Worker;
                                       using Microsoft.Azure.Functions.Worker.Context.Features;
                                       using Microsoft.Azure.Functions.Worker.Invocation;
                                       namespace TestProject
                                       {
                                           [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
                                           [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
                                           internal class DirectFunctionExecutor : global::Microsoft.Azure.Functions.Worker.Invocation.IFunctionExecutor
                                           {
                                               private readonly global::Microsoft.Azure.Functions.Worker.IFunctionActivator _functionActivator;
                                               private Lazy<global::Microsoft.Azure.Functions.Worker.Invocation.IFunctionExecutor> _defaultExecutor;
                                               private readonly Dictionary<string, Type> types = new Dictionary<string, Type>()
                                               {
                                                   { "MyCompany.MyHttpTriggers", Type.GetType("MyCompany.MyHttpTriggers, TestProject, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null") },
                                                   { "DependentAssemblyWithFunctions.DependencyFunction", Type.GetType("DependentAssemblyWithFunctions.DependencyFunction, DependentAssemblyWithFunctions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null") },
                                                   { "MyCompany.MyProduct.MyApp.HttpFunctions", Type.GetType("MyCompany.MyProduct.MyApp.HttpFunctions, DependentAssemblyWithFunctions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null") },
                                                   { "MyCompany.MyProduct.MyApp.Foo.Bar", Type.GetType("MyCompany.MyProduct.MyApp.Foo.Bar, DependentAssemblyWithFunctions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null") }
                                               };
                                       
                                               public DirectFunctionExecutor(global::Microsoft.Azure.Functions.Worker.IFunctionActivator functionActivator)
                                               {
                                                   _functionActivator = functionActivator ?? throw new global::System.ArgumentNullException(nameof(functionActivator));
                                               }

                                               /// <inheritdoc/>
                                               public async global::System.Threading.Tasks.ValueTask ExecuteAsync(global::Microsoft.Azure.Functions.Worker.FunctionContext context)
                                               {
                                                   var inputBindingFeature = context.Features.Get<global::Microsoft.Azure.Functions.Worker.Context.Features.IFunctionInputBindingFeature>();
                                                   var inputBindingResult = await inputBindingFeature.BindFunctionInputAsync(context);
                                                   var inputArguments = inputBindingResult.Values;
                                                   _defaultExecutor = new Lazy<global::Microsoft.Azure.Functions.Worker.Invocation.IFunctionExecutor>(() => CreateDefaultExecutorInstance(context));

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "MyCompany.MyHttpTriggers.Foo", StringComparison.Ordinal))
                                                   {
                                                       var instanceType = types["MyCompany.MyHttpTriggers"];
                                                       var i = _functionActivator.CreateInstance(instanceType, context) as global::MyCompany.MyHttpTriggers;
                                                       context.GetInvocationResult().Value = i.Foo((global::Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[0], (global::Microsoft.Azure.Functions.Worker.FunctionContext)inputArguments[1]);
                                                       goto end;
                                                   }

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "DependentAssemblyWithFunctions.DependencyFunction.Run", StringComparison.Ordinal))
                                                   {
                                                       var instanceType = types["DependentAssemblyWithFunctions.DependencyFunction"];
                                                       var i = _functionActivator.CreateInstance(instanceType, context) as global::DependentAssemblyWithFunctions.DependencyFunction;
                                                       context.GetInvocationResult().Value = i.Run((global::Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[0]);
                                                       goto end;
                                                   }

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "DependentAssemblyWithFunctions.InternalFunction.Run", StringComparison.Ordinal))
                                                   {
                                                       await _defaultExecutor.Value.ExecuteAsync(context);
                                                       goto end;
                                                   }

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "DependentAssemblyWithFunctions.StaticFunction.Run", StringComparison.Ordinal))
                                                   {
                                                       context.GetInvocationResult().Value = global::DependentAssemblyWithFunctions.StaticFunction.Run((global::Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[0], (global::Microsoft.Azure.Functions.Worker.FunctionContext)inputArguments[1]);
                                                       goto end;
                                                   }

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "MyCompany.MyProduct.MyApp.HttpFunctions.Run", StringComparison.Ordinal))
                                                   {
                                                       var instanceType = types["MyCompany.MyProduct.MyApp.HttpFunctions"];
                                                       var i = _functionActivator.CreateInstance(instanceType, context) as global::MyCompany.MyProduct.MyApp.HttpFunctions;
                                                       context.GetInvocationResult().Value = i.Run((global::Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[0]);
                                                       goto end;
                                                   }

                                                   if (string.Equals(context.FunctionDefinition.EntryPoint, "MyCompany.MyProduct.MyApp.Foo.Bar.Run", StringComparison.Ordinal))
                                                   {
                                                       var instanceType = types["MyCompany.MyProduct.MyApp.Foo.Bar"];
                                                       var i = _functionActivator.CreateInstance(instanceType, context) as global::MyCompany.MyProduct.MyApp.Foo.Bar;
                                                       context.GetInvocationResult().Value = i.Run((global::Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[0]);
                                                       goto end;
                                                   }

                                                   end:
                                                   return;
                                               }
                                       
                                               private global::Microsoft.Azure.Functions.Worker.Invocation.IFunctionExecutor CreateDefaultExecutorInstance(global::Microsoft.Azure.Functions.Worker.FunctionContext context)
                                               {
                                                   var defaultExecutorFullName = "Microsoft.Azure.Functions.Worker.Invocation.DefaultFunctionExecutor, Microsoft.Azure.Functions.Worker.Core, Version=1.19.0.0, Culture=neutral, PublicKeyToken=551316b6919f366c";
                                                   var defaultExecutorType = global::System.Type.GetType(defaultExecutorFullName);

                                                   return ActivatorUtilities.CreateInstance(context.InstanceServices, defaultExecutorType) as global::Microsoft.Azure.Functions.Worker.Invocation.IFunctionExecutor;
                                               }
                                           }
                                       {{GetExpectedExtensionMethodCode()}}
                                       }
                                       """.Replace("'", "\"");

                await TestHelpers.RunTestAsync<FunctionExecutorGenerator>(
                    _referencedAssemblies,
                    inputSourceCode,
                    Constants.FileNames.GeneratedFunctionExecutor,
                    expected);
            }
        }
    }
}
