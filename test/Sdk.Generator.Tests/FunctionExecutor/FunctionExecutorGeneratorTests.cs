using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public class FunctionExecutorGeneratorTests
    {
        string InputCode = @"
using System.Net;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace MyCompany
{
    public class MyHttpTriggers
    {
        private readonly ILogger _logger;
        public MyHttpTriggers(ILoggerFactory loggerFactory)
        {
            _logger = loggerFactory.CreateLogger<MyHttpTriggers>();
        }

        [Function(""FunctionA"")]
        public HttpResponseData Run1([HttpTrigger(AuthorizationLevel.Anonymous, ""get"", ""post"")] HttpRequestData req)
        {
            var response = req.CreateResponse(HttpStatusCode.OK);
            return response;
        }

        [Function(""Function2"")]
        public HttpResponseData Run2([HttpTrigger(AuthorizationLevel.Anonymous, ""get"", ""post"")] HttpRequestData httpReq, FunctionContext context)
        {
            var response = httpReq.CreateResponse(HttpStatusCode.OK);
            return response;
        }
    }
}
";

        [Fact]
        public async Task DefaultExecutorGenerates()
        {
            // Source generation is based on referenced assembly.
            var referencedExtensionAssemblies = new[]
            {
                typeof(ILogger).Assembly,
                typeof(HttpTriggerAttribute).Assembly,
                typeof(FunctionAttribute).Assembly,
                typeof(ServiceProviderServiceExtensions).Assembly,
                typeof(IConfiguration).Assembly
            };

            string expectedGeneratedFileName = $"GeneratedFunctionExecutor.g.cs";
            var expectedOutput = @"// <auto-generated/>
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Azure.Functions.Worker.Context.Features;
using Microsoft.Azure.Functions.Worker.Invocation;
namespace Microsoft.Azure.Functions.Worker
{
    internal class DirectFunctionExecutor : IFunctionExecutor
    {
        public async Task ExecuteAsync(FunctionContext context)
        {
            var modelBindingFeature = context.Features.Get<IModelBindingFeature>()!;
            var inputArguments = await modelBindingFeature.BindFunctionInputAsync(context);
            if (string.Equals(context.FunctionDefinition.Name, ""MyCompany.MyHttpTriggers.Run1"",StringComparison.OrdinalIgnoreCase))
            {
                var p1 = context.InstanceServices.GetService<Microsoft.Extensions.Logging.ILoggerFactory>();
                var t = new MyCompany.MyHttpTriggers(p1);
                context.GetInvocationResult().Value = t.Run1((Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[1]);
            }
            if (string.Equals(context.FunctionDefinition.Name, ""MyCompany.MyHttpTriggers.Run2"",StringComparison.OrdinalIgnoreCase))
            {
                var p1 = context.InstanceServices.GetService<Microsoft.Extensions.Logging.ILoggerFactory>();
                var t = new MyCompany.MyHttpTriggers(p1);
                context.GetInvocationResult().Value = t.Run2((Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[1],(Microsoft.Azure.Functions.Worker.FunctionContext)inputArguments[2]);
            }
        }
    }
}".Replace("'", "\"");

            await TestHelpers.RunTestAsync<Worker.Sdk.Generators.FunctionExecutorGenerator>(
                referencedExtensionAssemblies,
                InputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }
    }
}
