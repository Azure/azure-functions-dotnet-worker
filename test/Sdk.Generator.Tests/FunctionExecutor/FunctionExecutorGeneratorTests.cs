// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public class FunctionExecutorGeneratorTests
    {
        string expectedGeneratedFileName = $"GeneratedFunctionExecutor.g.cs";
        Assembly[] ReferencedAssemblies = new[]
        {
            typeof(ILogger).Assembly, typeof(HttpTriggerAttribute).Assembly, typeof(FunctionAttribute).Assembly,
            typeof(ServiceProviderServiceExtensions).Assembly, typeof(IConfiguration).Assembly,
            typeof(QueueTriggerAttribute).Assembly
        };

        string InputCode = @"
using System.Net;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace MyCompany
{
    public class MyHttpTriggers
    {
        private readonly ILogger _logger;
        public MyHttpTriggers(ILoggerFactory loggerFactory)
        {
            _logger = loggerFactory.CreateLogger<MyHttpTriggers>();
        }

        [Function(""Function1"")]
        public HttpResponseData Run1([HttpTrigger(AuthorizationLevel.Anonymous, ""get"")] HttpRequestData r)
            => r.CreateResponse(System.Net.HttpStatusCode.OK);

        [Function(""Function2"")]
        public HttpResponseData Run2([HttpTrigger(AuthorizationLevel.Anonymous, ""get"")] HttpRequestData r, FunctionContext c)
        {
            return r.CreateResponse(System.Net.HttpStatusCode.OK);
        }

        private int Foo(int x) => x * x;
    }
}
";
        string simpleNonStaticFunctionCode = @"
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;

namespace MyCompany
{
    public class MyHttpTriggers
    {
        [Function(""FunctionA"")]
        public HttpResponseData Run1([HttpTrigger(AuthorizationLevel.User, ""get"")] HttpRequestData r, FunctionContext c)
        {
            return r.CreateResponse(System.Net.HttpStatusCode.OK);
        }
        
        private int Foo(int x) => x * x;
    }
}
";
        
        [Fact]
        public async Task SimpleNonStatic()
        {
            var expectedOutput = @"// <auto-generated/>
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Azure.Functions.Worker.Context.Features;
using Microsoft.Azure.Functions.Worker.Invocation;
namespace Microsoft.Azure.Functions.Worker
{
    internal class DirectFunctionExecutor : IFunctionExecutor
    {
        public async Task ExecuteAsync(FunctionContext context)
        {
            var modelBindingFeature = context.Features.Get<IModelBindingFeature>()!;
            var inputArguments = await modelBindingFeature.BindFunctionInputAsync(context)!;
            if (string.Equals(context.FunctionDefinition.Name, ""MyCompany.MyHttpTriggers.Run1"", StringComparison.OrdinalIgnoreCase))
            {
                var t = new MyCompany.MyHttpTriggers();
                context.GetInvocationResult().Value = t.Run1((Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[1], (Microsoft.Azure.Functions.Worker.FunctionContext)inputArguments[2]);
            }
        }
    }
}".Replace("'", "\"");

            await TestHelpers.RunTestAsync<Worker.Sdk.Generators.FunctionExecutorGenerator>(
                ReferencedAssemblies,
                simpleNonStaticFunctionCode,
                expectedGeneratedFileName,
                expectedOutput);
        }
        

        [Fact]
        public async Task MultipleFunctionsDependencyInjection()
        {
            string expectedGeneratedFileName = $"GeneratedFunctionExecutor.g.cs";
            var expectedOutput = @"// <auto-generated/>
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Azure.Functions.Worker.Context.Features;
using Microsoft.Azure.Functions.Worker.Invocation;
namespace Microsoft.Azure.Functions.Worker
{
    internal class DirectFunctionExecutor : IFunctionExecutor
    {
        public async Task ExecuteAsync(FunctionContext context)
        {
            var modelBindingFeature = context.Features.Get<IModelBindingFeature>()!;
            var inputArguments = await modelBindingFeature.BindFunctionInputAsync(context)!;
            if (string.Equals(context.FunctionDefinition.Name, ""MyCompany.MyHttpTriggers.Run1"", StringComparison.OrdinalIgnoreCase))
            {
                var p1 = context.InstanceServices.GetService<Microsoft.Extensions.Logging.ILoggerFactory>();
                var t = new MyCompany.MyHttpTriggers(p1);
                context.GetInvocationResult().Value = t.Run1((Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[1]);
            }
            if (string.Equals(context.FunctionDefinition.Name, ""MyCompany.MyHttpTriggers.Run2"", StringComparison.OrdinalIgnoreCase))
            {
                var p1 = context.InstanceServices.GetService<Microsoft.Extensions.Logging.ILoggerFactory>();
                var t = new MyCompany.MyHttpTriggers(p1);
                context.GetInvocationResult().Value = t.Run2((Microsoft.Azure.Functions.Worker.Http.HttpRequestData)inputArguments[1], (Microsoft.Azure.Functions.Worker.FunctionContext)inputArguments[2]);
            }
        }
    }
}".Replace("'", "\"");

            await TestHelpers.RunTestAsync<Worker.Sdk.Generators.FunctionExecutorGenerator>(
                ReferencedAssemblies,
                InputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }
        
        [Fact]
        public async Task SimpleStatic()
        {
            var simpleStaticCode =@"using Microsoft.Azure.Functions.Worker;
namespace FunctionApp26
{
    public static class MyQueueTriggers
    {
        [Function(""ProcessOrder"")]
        public static async Task<string> MyStaticMethod([QueueTrigger(""myqueue"")] string q)
        {
            return q;
        }        
    }
}".Replace("'", "\"");
            var expectedOutput = @"// <auto-generated/>
using System;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Azure.Functions.Worker.Context.Features;
using Microsoft.Azure.Functions.Worker.Invocation;
namespace Microsoft.Azure.Functions.Worker
{
    internal class DirectFunctionExecutor : IFunctionExecutor
    {
        public async Task ExecuteAsync(FunctionContext context)
        {
            var modelBindingFeature = context.Features.Get<IModelBindingFeature>()!;
            var inputArguments = await modelBindingFeature.BindFunctionInputAsync(context)!;
            if (string.Equals(context.FunctionDefinition.Name, ""FunctionApp26.MyQueueTriggers.MyStaticMethod"", StringComparison.OrdinalIgnoreCase))
            {
                context.GetInvocationResult().Value = FunctionApp26.MyQueueTriggers.MyStaticMethod((string)inputArguments[1]);
            }
        }
    }
}".Replace("'", "\"");

            await TestHelpers.RunTestAsync<Worker.Sdk.Generators.FunctionExecutorGenerator>(
                ReferencedAssemblies,
                simpleStaticCode,
                expectedGeneratedFileName,
                expectedOutput);
        }
    }
}
