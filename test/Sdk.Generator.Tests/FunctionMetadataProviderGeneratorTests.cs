// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Sdk.Generators;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public class FunctionMetadataProviderGeneratorTests
    {
        private Assembly[] referencedExtensionAssemblies;

        public FunctionMetadataProviderGeneratorTests()
        {
            // load all extensions used in tests (match extensions tested on E2E app? Or include ALL extensions?)
            var abstractionsExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Abstractions.dll");
            var httpExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Http.dll");
            var storageExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.dll");
            var cosmosDBExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.CosmosDB.dll");
            var timerExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Timer.dll");
            var eventHubsExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.EventHubs.dll");
            var blobExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs.dll");
            var queueExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues.dll");
            var loggerExtension = Assembly.LoadFrom("Microsoft.Extensions.Logging.Abstractions.dll");
            var hostingExtension = Assembly.LoadFrom("Microsoft.Extensions.Hosting.dll");
            var diExtension = Assembly.LoadFrom("Microsoft.Extensions.DependencyInjection.dll");
            var hostingAbExtension = Assembly.LoadFrom("Microsoft.Extensions.Hosting.Abstractions.dll");
            var diAbExtension = Assembly.LoadFrom("Microsoft.Extensions.DependencyInjection.Abstractions.dll");

            referencedExtensionAssemblies = new[]
            {
                abstractionsExtension,
                httpExtension,
                storageExtension,
                cosmosDBExtension,
                timerExtension,
                eventHubsExtension,
                blobExtension,
                queueExtension,
                loggerExtension,
                hostingExtension,
                hostingAbExtension,
                diExtension,
                diAbExtension
            };

        }

        [Fact]
        public async Task GenerateSimpleHttpTriggerMetadataTest()
        {
            // test generating function metadata for a simple HttpTrigger
            string inputCode = @"
            using System;
            using System.Collections.Generic;
            using System.Diagnostics;
            using System.Net;
            using Microsoft.Azure.Functions.Worker;
            using Microsoft.Azure.Functions.Worker.Http;
            using Microsoft.Extensions.Logging;

            namespace FunctionApp
            {
                public static class HttpTriggerSimple
                {
                    [Function(nameof(HttpTriggerSimple))]
                    public static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous, ""get"", ""post"", Route = null)] HttpRequestData req, FunctionContext executionContext)
                    {
                        var sw = new Stopwatch();
                    sw.Restart();

                        var logger = executionContext.GetLogger(""FunctionApp.HttpTriggerSimple"");
                    logger.LogInformation(""Message logged"");

                        var response = req.CreateResponse(HttpStatusCode.OK);

                    response.Headers.Add(""Date"", ""Mon, 18 Jul 2016 16:06:00 GMT"");
                        response.Headers.Add(""Content-Type"", ""text/html; charset=utf-8"");
                        response.WriteString(""Hello world!"");

                        logger.LogMetric(@""funcExecutionTimeMs"", sw.Elapsed.TotalMilliseconds,
                            new Dictionary<string, object> {
                                { ""foo"", ""bar""},
                                { ""baz"", 42 }
                            }
                        );

                        return response;
                    }
                }
            }";

  
            string expectedGeneratedFileName = $"GeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Core;
using Microsoft.Azure.Functions.Worker.Core.FunctionMetadata;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
namespace Microsoft.Azure.Functions.Worker
{
    public class GeneratedFunctionMetadataProvider : IFunctionMetadataProvider
    {
        public Task<ImmutableArray<IFunctionMetadata>> GetFunctionMetadataAsync(string directory)
        {
            var metadataList = new List<IFunctionMetadata>();
            var HttpTriggerSimpleRawBindings = new List<string>();
            var HttpTriggerSimplereqBinding = new {
                name = 'req',
                type = 'HttpTrigger',
                direction = 'In',
                authLevel = '((AuthorizationLevel)0).ToString();',
                methods = new List<string> { 'get','post' },
            };
            var HttpTriggerSimplereqBindingJSONstring = JsonSerializer.Serialize(HttpTriggerSimplereqBinding);
            HttpTriggerSimpleRawBindings.Add(HttpTriggerSimplereqBindingJSONstring);
            var HttpTriggerSimplereturnBinding = new {
                name = '$return',
                type = 'http',
                direction = 'Out',
            };
            var HttpTriggerSimplereturnBindingJSONstring = JsonSerializer.Serialize(HttpTriggerSimplereturnBinding);
            HttpTriggerSimpleRawBindings.Add(HttpTriggerSimplereturnBindingJSONstring);
            var HttpTriggerSimple = new DefaultFunctionMetadata(Guid.NewGuid().ToString(), 'dotnet-isolated', 'HttpTriggerSimple', 'TestProject.HttpTriggerSimple.Run', HttpTriggerSimpleRawBindings, 'TestProject.dll');
            metadataList.Add(HttpTriggerSimple);
            return Task.FromResult(metadataList.ToImmutableArray());
        }
        public enum AuthorizationLevel
        {
            Anonymous,
            User,
            Function,
            System,
            Admin
        }
    }
    public static class WorkerHostBuilderFunctionMetadataProviderExtension
    {
        public static IHostBuilder ConfigureGeneratedFunctionMetadataProvider(this IHostBuilder builder)
        {
            builder.ConfigureServices(s => 
            {
                s.AddSingleton<IFunctionMetadataProvider, GeneratedFunctionMetadataProvider>();
            });
            return builder;
        }
    }
}
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        [Fact]
        public async Task GenerateFunctionWhereOutputBindingIsInTheReturnTypeTest()
        {
            // test generating function metadata for a simple HttpTrigger
            string inputCode = @"
            using System.Net;
            using Microsoft.Azure.Functions.Worker;
            using Microsoft.Azure.Functions.Worker.Http;

            namespace FunctionApp
            {
                public static class HttpTriggerWithMultipleOutputBindings
                {
                    [Function(nameof(HttpTriggerWithMultipleOutputBindings))]
                    public static MyOutputType Run([HttpTrigger(AuthorizationLevel.Anonymous, ""get"", ""post"", Route = null)] HttpRequestData req,
                        FunctionContext context)
                    {
                        var response = req.CreateResponse(HttpStatusCode.OK);
                        response.WriteString(""Success!"");

                        return new MyOutputType()
                        {
                            Name = ""some name"",
                            HttpResponse = response
                        };
                    }
                }

                public class MyOutputType
                {
                    [QueueOutput(""functionstesting2"", Connection = ""AzureWebJobsStorage"")]
                    public string Name { get; set; }

                    public HttpResponseData HttpResponse { get; set; }
                }
            }";


            string expectedGeneratedFileName = $"GeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Core;
using Microsoft.Azure.Functions.Worker.Core.FunctionMetadata;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
namespace Microsoft.Azure.Functions.Worker
{
    public class GeneratedFunctionMetadataProvider : IFunctionMetadataProvider
    {
        public Task<ImmutableArray<IFunctionMetadata>> GetFunctionMetadataAsync(string directory)
        {
            var metadataList = new List<IFunctionMetadata>();
            var HttpTriggerWithMultipleOutputBindingsRawBindings = new List<string>();
            var HttpTriggerWithMultipleOutputBindingsreqBinding = new {
                name = 'req',
                type = 'HttpTrigger',
                direction = 'In',
                authLevel = '((AuthorizationLevel)0).ToString();',
                methods = new List<string> { 'get','post' },
            };
            var HttpTriggerWithMultipleOutputBindingsreqBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithMultipleOutputBindingsreqBinding);
            HttpTriggerWithMultipleOutputBindingsRawBindings.Add(HttpTriggerWithMultipleOutputBindingsreqBindingJSONstring);
            var HttpTriggerWithMultipleOutputBindingsNameBinding = new {
                name = 'Name',
                type = 'QueueOutput',
                direction = 'Out',
                queueName = 'functionstesting2',
                Connection = 'AzureWebJobsStorage',
                dataType = 'String',
            };
            var HttpTriggerWithMultipleOutputBindingsNameBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithMultipleOutputBindingsNameBinding);
            HttpTriggerWithMultipleOutputBindingsRawBindings.Add(HttpTriggerWithMultipleOutputBindingsNameBindingJSONstring);
            var HttpTriggerWithMultipleOutputBindingsreturnBinding = new {
                name = '$return',
                type = 'http',
                direction = 'Out',
            };
            var HttpTriggerWithMultipleOutputBindingsreturnBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithMultipleOutputBindingsreturnBinding);
            HttpTriggerWithMultipleOutputBindingsRawBindings.Add(HttpTriggerWithMultipleOutputBindingsreturnBindingJSONstring);
            var HttpTriggerWithMultipleOutputBindings = new DefaultFunctionMetadata(Guid.NewGuid().ToString(), ""dotnet-isolated"", ""HttpTriggerWithMultipleOutputBindings"", ""TestProject.HttpTriggerWithMultipleOutputBindings.Run"", HttpTriggerWithMultipleOutputBindingsRawBindings, ""TestProject.dll"");
            metadataList.Add(HttpTriggerWithMultipleOutputBindings);
            return Task.FromResult(metadataList.ToImmutableArray());
        }
        public enum AuthorizationLevel
        {
            Anonymous,
            User,
            Function,
            System,
            Admin
        }
    }
    public static class WorkerHostBuilderFunctionMetadataProviderExtension
    {
        public static IHostBuilder ConfigureGeneratedFunctionMetadataProvider(this IHostBuilder builder)
        {
            builder.ConfigureServices(s => 
            {
                s.AddSingleton<IFunctionMetadataProvider, GeneratedFunctionMetadataProvider>();
            });
            return builder;
        }
    }
}
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        [Fact]
        public async Task FunctionWithStringDataTypeInputBindingTest()
        {
            string inputCode = @"
            using System.Net;
            using System.Text.Json;
            using Microsoft.Azure.Functions.Worker;
            using Microsoft.Azure.Functions.Worker.Http;

            namespace FunctionApp
            {
                public static class HttpTriggerWithBlobInput
                {
                    [Function(nameof(HttpTriggerWithBlobInput))]
                    public static MyOutputType Run(
                        [HttpTrigger(AuthorizationLevel.Anonymous, 'get', 'post', Route = null)] HttpRequestData req,
                        [BlobInput('test-samples/sample1.txt', Connection = 'AzureWebJobsStorage')] string myBlob, FunctionContext context)
                    {
                        var bookVal = (Book)JsonSerializer.Deserialize(myBlob, typeof(Book));

                        var response = req.CreateResponse(HttpStatusCode.OK);

                        response.Headers.Add('Date', 'Mon, 18 Jul 2016 16:06:00 GMT');
                        response.Headers.Add('Content-Type', 'text/html; charset=utf-8');
                        response.WriteString('Book Sent to Queue!');

                        return new MyOutputType()
                        {
                            Book = bookVal,
                            HttpResponse = response
                        };
                    }

                    public class MyOutputType
                    {
                        [QueueOutput('functionstesting2', Connection = 'AzureWebJobsStorage')]
                        public Book Book { get; set; }

                        public HttpResponseData HttpResponse { get; set; }
                    }

                    public class Book
                    {
                        public string name { get; set; }
                        public string id { get; set; }
                    }
                }
            }".Replace("'", "\"");

            string expectedGeneratedFileName = $"GeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Core;
using Microsoft.Azure.Functions.Worker.Core.FunctionMetadata;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
namespace Microsoft.Azure.Functions.Worker
{
    public class GeneratedFunctionMetadataProvider : IFunctionMetadataProvider
    {
        public Task<ImmutableArray<IFunctionMetadata>> GetFunctionMetadataAsync(string directory)
        {
            var metadataList = new List<IFunctionMetadata>();
            var HttpTriggerWithBlobInputRawBindings = new List<string>();
            var HttpTriggerWithBlobInputreqBinding = new {
                name = 'req',
                type = 'HttpTrigger',
                direction = 'In',
                authLevel = '((AuthorizationLevel)0).ToString();',
                methods = new List<string> { 'get','post' },
            };
            var HttpTriggerWithBlobInputreqBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputreqBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputreqBindingJSONstring);
            var HttpTriggerWithBlobInputmyBlobBinding = new {
                name = 'myBlob',
                type = 'Blob',
                direction = 'In',
                blobPath = 'test-samples/sample1.txt',
                Connection = 'AzureWebJobsStorage',
                dataType = 'String',
            };
            var HttpTriggerWithBlobInputmyBlobBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputmyBlobBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputmyBlobBindingJSONstring);
            var HttpTriggerWithBlobInputBookBinding = new {
                name = 'Book',
                type = 'QueueOutput',
                direction = 'Out',
                queueName = 'functionstesting2',
                Connection = 'AzureWebJobsStorage',
            };
            var HttpTriggerWithBlobInputBookBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputBookBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputBookBindingJSONstring);
            var HttpTriggerWithBlobInputreturnBinding = new {
                name = '$return',
                type = 'http',
                direction = 'Out',
            };
            var HttpTriggerWithBlobInputreturnBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputreturnBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputreturnBindingJSONstring);
            var HttpTriggerWithBlobInput = new DefaultFunctionMetadata(Guid.NewGuid().ToString(), 'dotnet-isolated', 'HttpTriggerWithBlobInput', 'TestProject.HttpTriggerWithBlobInput.Run', HttpTriggerWithBlobInputRawBindings, 'TestProject.dll');
            metadataList.Add(HttpTriggerWithBlobInput);
            return Task.FromResult(metadataList.ToImmutableArray());
        }
        public enum AuthorizationLevel
        {
            Anonymous,
            User,
            Function,
            System,
            Admin
        }
    }
    public static class WorkerHostBuilderFunctionMetadataProviderExtension
    {
        public static IHostBuilder ConfigureGeneratedFunctionMetadataProvider(this IHostBuilder builder)
        {
            builder.ConfigureServices(s => 
            {
                s.AddSingleton<IFunctionMetadataProvider, GeneratedFunctionMetadataProvider>();
            });
            return builder;
        }
    }
}
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        [Fact]
        public async Task FunctionWithNonFunctionsRelatedAttributeTest()
        {
            string inputCode = @"
            using System;
            using System.Net;
            using System.Text.Json;
            using Microsoft.Azure.Functions.Worker;
            using Microsoft.Azure.Functions.Worker.Http;

            namespace FunctionApp
            {
                public class HttpTriggerWithBlobInput
                {
                    [Function('Products')]
                    public HttpResponseData Run(
                                   [HttpTrigger(AuthorizationLevel.Anonymous, ""get"", Route = null)] HttpRequestData req,
                                   [FakeAttribute('hi')] string someString)
                    {
                        var response = req.CreateResponse(HttpStatusCode.OK);
                        response.Headers.Add(""Content-Type"", ""text/plain; charset=utf-8"");
                        return response;
                    }
                }

                public class FakeAttribute : Attribute
                {
                    public FakeAttribute(string name)
                    {
                        Name = name;
                    }

                    public string Name { get; }
                }
            }".Replace("'", "\"");

            string expectedGeneratedFileName = $"GeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Core;
using Microsoft.Azure.Functions.Worker.Core.FunctionMetadata;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
namespace Microsoft.Azure.Functions.Worker
{
    public class GeneratedFunctionMetadataProvider : IFunctionMetadataProvider
    {
        public Task<ImmutableArray<IFunctionMetadata>> GetFunctionMetadataAsync(string directory)
        {
            var metadataList = new List<IFunctionMetadata>();
            var HttpTriggerWithBlobInputRawBindings = new List<string>();
            var HttpTriggerWithBlobInputreqBinding = new {
                name = 'req',
                type = 'HttpTrigger',
                direction = 'In',
                authLevel = '((AuthorizationLevel)0).ToString();',
                methods = new List<string> { 'get' },
            };
            var HttpTriggerWithBlobInputreqBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputreqBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputreqBindingJSONstring);
            var HttpTriggerWithBlobInputreturnBinding = new {
                name = '$return',
                type = 'http',
                direction = 'Out',
            };
            var HttpTriggerWithBlobInputreturnBindingJSONstring = JsonSerializer.Serialize(HttpTriggerWithBlobInputreturnBinding);
            HttpTriggerWithBlobInputRawBindings.Add(HttpTriggerWithBlobInputreturnBindingJSONstring);
            var HttpTriggerWithBlobInput = new DefaultFunctionMetadata(Guid.NewGuid().ToString(), ""dotnet-isolated"", ""HttpTriggerWithBlobInput"", ""TestProject.HttpTriggerWithBlobInput.Run"", HttpTriggerWithBlobInputRawBindings, ""TestProject.dll"");
            metadataList.Add(HttpTriggerWithBlobInput);
            return Task.FromResult(metadataList.ToImmutableArray());
        }
        public enum AuthorizationLevel
        {
            Anonymous,
            User,
            Function,
            System,
            Admin
        }
    }
    public static class WorkerHostBuilderFunctionMetadataProviderExtension
    {
        public static IHostBuilder ConfigureGeneratedFunctionMetadataProvider(this IHostBuilder builder)
        {
            builder.ConfigureServices(s => 
            {
                s.AddSingleton<IFunctionMetadataProvider, GeneratedFunctionMetadataProvider>();
            });
            return builder;
        }
    }
}
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        [Fact]
        public void FormatStringObjectTest()
        {
            var stringObject = "\"get\"";
            var result = FunctionMetadataProviderGenerator.FormatObject(stringObject);
            // this method should not alter objects that are already strings
            Assert.Equal(stringObject, result);
        }

        [Fact]
        public void FormatEnumObjectTest()
        {
            var enumObjectString = "Enum.GetName(typeof(AuthorizationLevel), 0)";
            var result = FunctionMetadataProviderGenerator.FormatObject(enumObjectString);
            // this method shouldn't alter Enum parsing statements - we want them source generated as a method call, not as a string.
            Assert.Equal(enumObjectString, result);
        }

        [Fact]
        public void FormatNullObjectTest()
        {
            var result = FunctionMetadataProviderGenerator.FormatObject(null);
            Assert.Equal("null", result);
        }

        [Fact]
        public void FormatObjectToGeneratedStringTest()
        {
            var attributeObject = "HttpTrigger";
            var expected = "\"HttpTrigger\"";
            string result = FunctionMetadataProviderGenerator.FormatObject(attributeObject);
            Assert.Equal(expected, result);
        }

        [Fact]
        public void FormatArrayTest()
        {
            var exampleEnumerable = new List<string> { "get", "post" };
            var expected = "new List<string> { \"get\",\"post\" }";
            var result = FunctionMetadataProviderGenerator.FormatArray(exampleEnumerable);
            Assert.Equal(expected, result);
        }
    }
}
