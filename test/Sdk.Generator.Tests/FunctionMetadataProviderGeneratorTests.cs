// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System.Reflection;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Sdk.Generators;
using Xunit;

namespace Microsoft.Azure.Functions.SdkGeneratorTests
{
    public class FunctionMetadataProviderGeneratorTests
    {
        private Assembly[] referencedExtensionAssemblies;

        public FunctionMetadataProviderGeneratorTests()
        {
            // load all extensions used in tests (match E2E app? Or include ALL extensions?)
            var abstractionsExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Abstractions.dll");
            var httpExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Http.dll");
            var storageExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.dll");
            var cosmosDBExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.CosmosDB.dll");
            var timerExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Timer.dll");
            var eventHubsExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.EventHubs.dll");
            var blobExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs.dll");
            var queueExtension = Assembly.LoadFrom("Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues.dll");

            referencedExtensionAssemblies = new[]
            {
                abstractionsExtension,
                httpExtension,
                storageExtension,
                cosmosDBExtension,
                timerExtension,
                eventHubsExtension,
                blobExtension,
                queueExtension
            };

        }

        [Fact]
        public async Task GenerateSimpleHttpTriggerMetadata()
        {
            string inputCode = @"
            using System;
            using System.Collections.Generic;
            using System.Diagnostics;
            using System.Net;
            using Microsoft.Azure.Functions.Worker;
            using Microsoft.Azure.Functions.Worker.Http;
            using Microsoft.Extensions.Logging;

            namespace FunctionApp
            {
                public static class HttpTriggerSimple
                {
                    [Function(nameof(HttpTriggerSimple))]
                    public static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous, ""get"", ""post"", Route = null)] HttpRequestData req, FunctionContext executionContext)
                    {
                        var sw = new Stopwatch();
                    sw.Restart();

                        var logger = executionContext.GetLogger(""FunctionApp.HttpTriggerSimple"");
                    logger.LogInformation(""Message logged"");

                        var response = req.CreateResponse(HttpStatusCode.OK);

                    response.Headers.Add(""Date"", ""Mon, 18 Jul 2016 16:06:00 GMT"");
                        response.Headers.Add(""Content-Type"", ""text/html; charset=utf-8"");
                        response.WriteString(""Hello world!"");

                        logger.LogMetric(@""funcExecutionTimeMs"", sw.Elapsed.TotalMilliseconds,
                            new Dictionary<string, object> {
                                { ""foo"", ""bar""},
                                { ""baz"", 42 }
                            }
                        );

                        return response;
                    }
                }
            }";

  
            string expectedGeneratedFileName = $"SourceGeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Grpc.Messages;
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }

        /*[Fact]
        public async Task GenerateQueueTriggerMetadata()
        {
            string inputCode = @"
using System;
using Microsoft.Azure.Functions.Worker;

namespace FunctionApp
{
    public static class QueueTrigger
    {
        [Function(nameof(QueueTrigger))]
        public static Book Run([QueueTrigger('functionstesting2', Connection = 'AzureWebJobsStorage')] Book myQueueItem,
            [BlobInput('test-samples/sample1.txt', Connection = 'AzureWebJobsStorage')]
        string myBlob)
        {
            Console.WriteLine(myBlob);
            return myQueueItem;
        }
}

public class Book
{
    public string name { get; set; }
    public string id { get; set; }
}

 public static class HttpTriggerSimple
    {
        [Function(nameof(HttpTriggerSimple))]
        public static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous, 'get', 'post', Route = null)] HttpRequestData req, FunctionContext executionContext)
        {
                var sw = new Stopwatch();
                sw.Restart();

                var logger = executionContext.GetLogger('FunctionApp.HttpTriggerSimple');
                logger.LogInformation('Message logged');

                var response = req.CreateResponse(HttpStatusCode.OK);

                response.Headers.Add('Date', 'Mon, 18 Jul 2016 16:06:00 GMT');
                response.Headers.Add('Content-Type', 'text/html; charset=utf-8');
                response.WriteString('Hello world!');

                logger.LogMetric(@'funcExecutionTimeMs', sw.Elapsed.TotalMilliseconds,
                    new Dictionary<string, object> {
                    { 'foo', 'bar' },
                    { 'baz', 42 }
                    }
                );

                return response;
            }
        }

    }
".Replace("'", "\"");

            string expectedGeneratedFileName = $"SourceGeneratedFunctionMetadataProvider.g.cs";
            string expectedOutput = @"// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker.Grpc.Messages;
".Replace("'", "\"");

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }*/


/*        [Fact]
        public async Task GenerateHttpTriggerWithBlobInputMetadata()
        {
            string inputCode = @"
        using System.Net;
using System.Text.Json;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;

namespace FunctionApp
    {
        public static class HttpTriggerWithBlobInput
        {
            [Function(nameof(HttpTriggerWithBlobInput))]
            public static MyOutputType Run(
                [HttpTrigger(AuthorizationLevel.Anonymous, 'get', 'post', Route = null)] HttpRequestData req,
        [BlobInput('test-samples/sample1.txt', Connection = 'AzureWebJobsStorage')] string myBlob, FunctionContext context)
            {
                var bookVal = (Book)JsonSerializer.Deserialize(myBlob, typeof(Book));

                var response = req.CreateResponse(HttpStatusCode.OK);

                response.Headers.Add('Date', 'Mon, 18 Jul 2016 16:06:00 GMT');
                response.Headers.Add('Content-Type', 'text/html; charset=utf-8');
                response.WriteString('Book Sent to Queue!');

                return new MyOutputType()
                {
                    Book = bookVal,
                    HttpResponse = response
                };
            }

            public class MyOutputType
        {
            [QueueOutput('functionstesting2', Connection = 'AzureWebJobsStorage')]
            public Book Book { get; set; }

            public HttpResponseData HttpResponse { get; set; }
        }

        public class Book
        {
            public string name { get; set; }
            public string id { get; set; }
        }
    }
}".Replace("'", "\"");
            string expectedGeneratedFileName = $"SourceGeneratedFunctionMetadataProvider2.g.cs";
            string expectedOutput = "something";

            await TestHelpers.RunTestAsync<FunctionMetadataProviderGenerator>(
                referencedExtensionAssemblies,
                inputCode,
                expectedGeneratedFileName,
                expectedOutput);
        }*/
    }
}
